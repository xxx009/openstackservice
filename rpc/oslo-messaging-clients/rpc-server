#!/usr/bin/env python
#
# Copyright 2016 Kenneth A. Giusti
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
import logging
import optparse
import sys
import time

from oslo_config import cfg
import oslo_messaging as messaging

debug = True
quiet = False

class TestEndpoint(object):
    global quiet
    global debug
    def __init__(self, server, target=None):
        self.server = server
        self.target = target

    def sink(self, ctx, **args):
        """Drop the message - no reply sent."""
        if not quiet: print("%s::TestEndpoint:sink( ctxt=%s arg=%s ) called!!!"
                            % (self.server, str(ctx),str(args)))

    def echo(self, ctx, **args):
        """Send the args back to the sender"""
        if not quiet: print("%s::TestEndpoint::echo( ctxt=%s arg=%s ) called!!!"
                        % (self.server, str(ctx),str(args)))
        return {"method":"echo", "context":ctx, "args":args}

    def sleep(self, ctx, **args):
        if not quiet:
            print("%s::TestEndpoint::sleeps( ctxt=%s arg=%s ) called!!!"
                  % (self.server, str(ctx),str(args)))
        if debug: print("   sleeping...");
        time.sleep(float(args.get("timeout", 10.0)))
        if debug: print("   ...awake!");


def main(argv=None):

    global debug
    global quiet
    
    # <server name>指的是给服务命名，
    _usage = """Usage: %prog [options] <server name>"""
    parser = optparse.OptionParser(usage=_usage)
    parser.add_option("--topic", action="store", default="my-topic",
                      help="target topic, default 'my-topic'")
    parser.add_option("--exchange", action="store", default="my-exchange",
                      help="target exchange, default 'my-exchange'")
    parser.add_option("--namespace", action="store", default="my-namespace",
                      help="target namespace, default 'my-namespace'")
    parser.add_option("--version", action="store", default="1.1",
                      help="target version, default '1.1'")
    parser.add_option("--url", action="store", default="rabbit://localhost",
                      help="transport address, default 'rabbit://localhost'")
    parser.add_option("--executor", action="store", default="blocking",
                      help="defaults to 'blocking'")
    parser.add_option("--oslo-config", type="string",
                      help="the oslo.messaging configuration file.")
    parser.add_option("--debug", action="store_true",
                      help="Enable debug logging.")
    parser.add_option("--quiet", action="store_true",
                      help="Suppress all stdout output")

    opts, extra = parser.parse_args(args=argv)
    if not extra:
        print("<server-name> not supplied!")
        return -1
    debug = opts.debug
    quiet = opts.quiet
    server_name = extra[0]

    if debug:
        print("Running server, name=%s exchange=%s topic=%s namespace=%s"
              % (server_name, opts.exchange, opts.topic, opts.namespace))

    if debug:
        logging.basicConfig(level=logging.DEBUG)
    else:
        logging.basicConfig(level=logging.INFO)

    if opts.oslo_config:
        if opts.debug: print("Loading config file %s" % opts.oslo_config)
        cfg.CONF(["--config-file", opts.oslo_config])

    transport = messaging.get_transport(cfg.CONF, url=opts.url)

    target = messaging.Target(exchange=opts.exchange,
                              topic=opts.topic,
                              namespace=opts.namespace,
                              server=server_name,
                              version=opts.version)
    server = messaging.get_rpc_server(transport, target,
                                      [TestEndpoint(server_name, target)],
                                      executor=opts.executor)

    try:
        server.start()
        while True:
            time.sleep(1)
            if debug:
                sys.stdout.write('.')
                sys.stdout.flush()
    except KeyboardInterrupt:
        if debug: print("Stopping..")
        server.stop()
        server.wait()
    return 0

if __name__ == "__main__":
    sys.exit(main())
